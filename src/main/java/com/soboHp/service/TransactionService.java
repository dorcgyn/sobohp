package com.soboHp.service;

import java.util.ArrayList;

import com.soboHp.bean.Transaction;
import com.soboHp.bean.User;
import com.soboHp.dao.TranDao;

public class TransactionService {
	public static ArrayList<Transaction> getConfirmedTrans(User current, User target) throws Exception {
		ArrayList<Transaction> allTrans = TranDao.getAllTransactionByUser(current.getId());
		
		ArrayList<Transaction> confirmedTrans = new ArrayList<Transaction>();
		for (Transaction tran : allTrans) {
			if (TranDao.STATUS_CONFIRMED.equalsIgnoreCase(tran.getStatus())) {
				if (target == null // for all users 
						|| (tran.getLender_id() == target.getId() || tran.getBorrow_id() == target.getId())) {
					confirmedTrans.add(tran);
				}
			}
		}
		return confirmedTrans;
	}
	
	public static ArrayList<Transaction> getPendingTrans(User current) throws Exception {
		ArrayList<Transaction> allTrans = TranDao.getAllTransactionByUser(current.getId());
		
		ArrayList<Transaction> pendingTrans = new ArrayList<Transaction>();
		for (Transaction tran : allTrans) {
			if (TranDao.STATUS_PENDING.equalsIgnoreCase(tran.getStatus())
					// not generated by current user
					&& tran.getGenerator_id() != current.getId()) {
				pendingTrans.add(tran);
			}
		}
		return pendingTrans;
	}
	
	public static ArrayList<Transaction> getConfirmedOrRefusedTrans(User current) throws Exception {
		ArrayList<Transaction> allTrans = TranDao.getAllTransactionByUser(current.getId());
		
		ArrayList<Transaction> confirmOrRefuse = new ArrayList<Transaction>();
		for (Transaction tran : allTrans) {
			if ((TranDao.STATUS_CONFIRMED.equalsIgnoreCase(tran.getStatus())
					||TranDao.STATUS_REFUSED.equalsIgnoreCase(tran.getStatus()))
					// not generated by current user
					&& tran.getGenerator_id() != current.getId()) {
				confirmOrRefuse.add(tran);
			}
		}
		return confirmOrRefuse;
	}
	
	private static void validateTranStatusOp(int tranId, User current) throws Exception {
		Transaction tran = TranDao.getTransactionById(tranId);
		int currentId = current.getId();
		if (TranDao.STATUS_PENDING.equals(tran.getStatus())
				&& tran.getTargetUserId() == currentId) {
			return;
		}
		else {
			throw new Exception("Not satify requirements to change status!!");
		}
	}
	
	public static void confirmTran(int tranId, User current) throws Exception {
		validateTranStatusOp(tranId, current);
		TranDao.changeStatusTransaction(tranId, TranDao.STATUS_CONFIRMED);
	}
	
	public static void refuseTran(int tranId, User current) throws Exception{
		validateTranStatusOp(tranId, current);
		TranDao.changeStatusTransaction(tranId, TranDao.STATUS_REFUSED);
	}
	
	public static Transaction createTransaction (Transaction origin) throws Exception {
		int id = TranDao.createTransaction(origin);
		Transaction tran = TranDao.getTransactionById(id);
		return tran;
	}
}
